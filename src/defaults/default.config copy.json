{
  "general": {
    "headless_mode": false,
    "source_dirname": "src",
    "overwrite": false,
    "skip_tests": false,
    "with_dependencies": false,
    "use_di": true,
    "use_case_method_name": "execute"
  },
  "databases": [
    {
      "name": "MongoDB",
      "alias": "mongo",
      "imports": {
        "driver": {
          "path": "driver import from \"...\""
        },
        "storage": {
          "path": "storage import from \"...\""
        }
      },
      "storage": {
        "name": "MongoStorage",
        "source": {
          "name": "MongoSource"
        },
        "config": {
          "name": "MongoConfig"
        }
      },
      "mappings": [
        {
          "db_type": "ObjectID",
          "code_type": "ObjectID"
        },
        {
          "db_type": "Long",
          "code_type": "bigint"
        },
        {
          "db_type": "ISODate",
          "code_type": "Date"
        },
        {
          "db_type": "Timestamp",
          "code_type": "Timestamp"
        },
        {
          "db_type": "Regex",
          "code_type": "RegExp"
        },
        {
          "db_type": "Binary",
          "code_type": "Buffer"
        }
      ]
    },
    {
      "name": "MySQL",
      "alias": "mysql",
      "imports": {
        "driver": {
          "path": "driver import from \"...\""
        },
        "storage": {
          "path": "storage import from \"...\""
        }
      },
      "storage": {
        "name": "MySqlStorage",
        "source": {
          "name": "MySqlSource"
        },
        "config": {
          "name": "MySqlConfig"
        }
      },
      "mappings": [
        {
          "db_type": "DATETIME",
          "code_type": "Date"
        }
      ]
    }
  ],
  "code_language": {
    "name": "TypeScript",
    "alias": "typescript",
    "types": [
      "string",
      "number",
      "boolean",
      "object",
      "any",
      "unknown",
      "null",
      "Array",
      "Set",
      "Map",
      "Date",
      "Buffer",
      "bigint",
      "void"
    ]
  },
  "template": {
    "print_jsdocs": true,
    "print_markers": true,
    "print_examples": true
  },
  "source": {
    "storage": {
      "name_pattern": "{{pascal name}}{{pascal type}}Storage",
      "dependencies": [],
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/{{kebab name}}.{{kebab type}}.storage.ts",
      "template_path": "templates/storage.hbs",
      "defaults": {
        "common": {
          "imports": [
          {
            "path": "@cole-framework/api-core"
          }
        ],
        "props": [],
        "methods": []
        }
      }
    },
    "controller": {
      "name_pattern": "{{pascal name}}Controller",
      "dependencies": [],
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/{{kebab name}}.controller.ts",
      "template_path": "templates/controller.hbs",
      "defaults": {
        "common": {
          "imports": [
          {
            "list": [
              "injectable",
              "inject"
            ],
            "path": "@cole-framework/api-core"
          }
        ],
        "props": [],
        "methods": []
        }
      }
    },
    "mapper": {
      "name_pattern": "{{pascal name}}{{pascal type}}Mapper",
      "dependencies": [
        "model",
        "entity"
      ],
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/mappers/{{kebab name}}.{{kebab type}}.mapper.ts",
      "template": "templates/mapper.hbs",
      "defaults": {
        "common": {
          "methods": [
            {
              "name": "toEntity",
              "params": [
                {
                  "name": "model",
                  "type": "use#model.name"
                }
              ],
              "return_type": "use#entity.name"
            },
            {
              "name": "toModel",
              "params": [
                {
                  "name": "entity",
                  "type": "use#entity.name"
                }
              ],
              "return_type": "use#model.name"
            }
          ]
        },
        "mongo": {
          "inheritance": {
            "name": "MongoMapper",
            "generics": [
              {
                "dflt": "use#entity.name"
              },
              {
                "dflt": "use#model.name"
              }
            ]
          },
          "interfaces": [],
          "imports": [
            {
              "list": [
                "MongoDB",
                "MongoMapper"
              ],
              "path": "@cole-framework/storage-mongodb"
            }
          ]
        }
      }
    },
    "collection_source": {
      "name_pattern": "{{pascal name}}{{pascal type}}Collection",
      "dependencies": [
        "model"
      ],
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/collection-sources/{{kebab name}}.{{kebab type}}.collection.ts",
      "template_path": "templates/collection_source.hbs",
      "defaults": {
        "mongo": {
          "imports": [
            {
              "list": [
                "MongoDB",
                "CollectionMongoSource",
                "MongoSource"
              ],
              "path": "@cole-framework/storage-mongodb"
            }
          ],
          "props": [
            {
              "access": "protected",
              "name": "mongoSource",
              "type": "MongoSource",
              "optional": false
            },
            {
              "id": "global#data_source_table_name_prop",
              "access": "protected",
              "name": "name",
              "type": "string",
              "optional": false,
              "value": "{{table}}"
            }
          ]
        }
      }
    },
    "entity": {
      "name_pattern": "{{pascal name}}",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/entities/{{kebab name}}.ts",
      "template_path": "templates/entity.hbs",
      "defaults": {
        "common": {
          "generics": [{ "dflt": "use#model.name" }],
          "methods": [
            {
              "meta": "is#to_model_method",
              "name": "toModel",
              "params": [],
              "return_type": "use#model.name"
            }
          ],
          "imports": [
            {
              "list": [
                "Entity",
                "UnknownObject"
              ],
              "path": "@cole-framework/api-core"
            }
          ],
          "props": [
            {
              "access": "public",
              "default": "\"\"",
              "name": "id",
              "type": "string",
              "optional": false
            },
            {
              "access": "public",
              "name": "rest",
              "type": "string",
              "optional": true
            }
          ]
        }
      }
    },
    "alias": {
      "name_pattern": "{{pascal name}}",
      "dependencies": [],
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/dtos/{{kebab name}}.dto.ts",
      "template_path": "templates/model.hbs"
    },
    "model": {
      "name_pattern": "{{pascal name}}{{pascal type}}Model",
      "dependencies": [],
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/dtos/{{kebab name}}.dto.ts",
      "template_path": "templates/model.hbs",
      "defaults": {
        "mongo": {
          "imports": [
            {
              "list": [
                "MongoDB"
              ],
              "path": "@cole-framework/storage-mongodb"
            }
          ],
          "props": [
            {
              "name": "_id",
              "type": "MongoDB.ObjectId",
              "import": "mongo",
              "optional": true
            }
          ]
        },
        "json": {
          "imports": [],
          "props": [
            {
              "name": "id",
              "type": "string",
              "optional": true
            }
          ]
        }
      }
    },
    "repository": {
      "name_pattern": "{{pascal name}}Repository",
      "dependencies": [
        "entity"
      ],
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/repositories/{{kebab name}}.repository.ts",
      "template_path": "templates/repository.hbs",
      "defaults": {
        "common": {
          "imports": [
          {
            "list": [
              "Repository",
              "RepositoryImpl",
              "injectable"
            ],
            "path": "@cole-framework/api-core"
          }
        ],
        "props": []
        }
      }
    },
    "repository_impl": {
      "name_pattern": "{{pascal name}}RepositoryImpl",
      "dependencies": [
        "model",
        "entity",
        "mapper"
      ],
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/repositories/{{kebab name}}.repository-impl.ts",
      "template_path": "templates/repository_impl.hbs",
      "defaults": {
        "mongo": {
          "imports": [
            {
              "list": [
                "Repository",
                "RepositoryImpl"
              ],
              "path": "@cole-framework/api-core"
            },
            {
              "list": [
                "MongoQueryBuilders",
                "MongoSource",
                "MongoConfig"
              ],
              "path": "@cole-framework/storage-mongodb"
            }
          ],
          "props": []
        }
      }
    },
    "repository_factory": {
      "name_pattern": "{{pascal name}}RepositoryFactory",
      "dependencies": [
        "model",
        "entity",
        "mapper",
        "repository",
        "repository_impl"
      ],
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/repositories/{{kebab name}}.repository-factory.ts",
      "template_path": "templates/repository_factory.hbs",
      "defaults": {
        "mongo": {
          "imports": [
            {
              "list": [
                "MongoSource",
                "MongoConfig",
                "MongoQueryBuilders",
                "MongoSource"
              ],
              "path": "@cole-framework/storage-mongodb"
            },
            {
              "list": [
                "RepositoryImpl",
                "Container"
              ],
              "path": "@cole-framework/api-core"
            }
          ],
          "props": [],
          "methods": [
            {
              "id": "global#repository_factory_method",
              "name": "create",
              "params": [],
              "return": null,
              "async": true,
              "access": "public",
              "static": true
            }
          ]
        }
      }
    },
    "use_case": {
      "name_pattern": "{{pascal name}}UseCase",
      "dependencies": [],
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/use-cases/{{kebab name}}.use-case.ts",
      "template_path": "templates/use_case.hbs",
      "defaults": {
        "imports": [
          {
            "list": [
              "injectable",
              "inject",
              "UseCase",
              "Result",
              "Failure"
            ],
            "path": "@cole-framework/api-core"
          }
        ],
        "props": [],
        "methods": [
          {
            "id": "global#use_case_execution_method",
            "name": "execute",
            "params": [],
            "return": null,
            "async": true
          }
        ]
      }
    },
    "route": {
      "name_pattern": "{{pascal method}}{{pascal name}}Route",
      "dependencies": [
        "route_io",
        "route_schema",
        "route_validator",
        "route_hook"
      ],
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/routes/{{kebab method}}-{{kebab name}}.route.ts",
      "template_path": "templates/route.hbs",
      "defaults": {
        "methods": [
          {
            "name": "create",
            "params": [
              {
                "name": "handler",
                "type": "RouteHandler"
              }
            ]
          }
        ],
        "construct": {
          "access": "private",
          "params": [
            {
              "name": "handler",
              "type": "RouteHandler"
            }
          ],
          "super": {
            "params": [
              {
                "id": "global#route_constructor_super_path",
                "name": "path"
              },
              {
                "name": "handler",
                "type": "RouteHandler",
                "value": "handler"
              },
              {
                "id": "global#route_constructor_super_addons",
                "name": "addons",
                "value": {
                  "io": "global#route_io"
                }
              }
            ]
          }
        },
        "get": {
          "imports": [
            {
              "list": [
                "UnknownObject",
                "GetRoute",
                "RouteHandler"
              ],
              "path": "@cole-framework/api-core"
            }
          ],
          "props": []
        },
        "post": {
          "imports": [
            {
              "list": [
                "UnknownObject",
                "PostRoute",
                "RouteHandler"
              ],
              "path": "@cole-framework/api-core"
            }
          ],
          "props": []
        },
        "put": {
          "imports": [
            {
              "list": [
                "UnknownObject",
                "PutRoute",
                "RouteHandler"
              ],
              "path": "@cole-framework/api-core"
            }
          ],
          "props": []
        },
        "patch": {
          "imports": [
            {
              "list": [
                "UnknownObject",
                "PatchRoute",
                "RouteHandler"
              ],
              "path": "@cole-framework/api-core"
            }
          ],
          "props": []
        },
        "delete": {
          "imports": [
            {
              "list": [
                "UnknownObject",
                "DeleteRoute",
                "RouteHandler"
              ],
              "path": "@cole-framework/api-core"
            }
          ],
          "props": []
        }
      }
    },
    "route_hook": {
      "name_pattern": "{{pascal method}}{{pascal name}}Hook",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/routes/{{kebab method}}-{{kebab name}}.route-hook.ts",
      "template_path": "templates/route_hook.hbs"
    },
    "route_io": {
      "name_pattern": "{{pascal method}}{{pascal name}}RouteIO",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/routes/{{kebab method}}-{{kebab name}}.route-io.ts",
      "template_path": "templates/route_io.hbs",
      "defaults": {
        "types": [
          {
            "id": "global#route_io_request_type",
            "name": ""
          },
          {
            "id": "global#route_io_response_type",
            "name": ""
          },
          {
            "id": "global#route_io_handler_input_type",
            "name": ""
          },
          {
            "id": "global#route_io_handler_output_type",
            "name": ""
          }
        ],
        "methods": [
          {
            "id": "global#route_io_method_to_response",
            "name": "toResponse",
            "params": [
              {
                "id": "global#route_io_handler_output_type",
                "name": "output"
              }
            ],
            "return_type": "global#route_io_response_type",
            "async": true,
            "access": "public",
            "static": false
          },
          {
            "id": "global#route_io_method_from_request",
            "name": "fromRequest",
            "params": [
              {
                "id": "global#route_io_request_type",
                "name": "request"
              }
            ],
            "return_type": "global#route_io_handler_input_type",
            "async": true,
            "access": "public",
            "static": false
          }
        ]
      }
    },
    "route_auth": {
      "name_pattern": "{{pascal method}}{{pascal name}}Auth",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/routes/{{kebab method}}-{{kebab name}}.route-auth.ts",
      "template_path": "templates/route_auth.hbs"
    },
    "route_validator": {
      "name_pattern": "{{pascal method}}{{pascal name}}Validator",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/routes/{{kebab method}}-{{kebab name}}.route-validator.ts",
      "template_path": "templates/route_validator.hbs"
    },
    "route_model": {
      "name_pattern": "{{pascal method}}{{pascal name}}{{pascal type}}",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/routes/{{kebab method}}-{{kebab name}}.route-models.ts",
      "template_path": "templates/model.hbs",
      "defaults": {
        "route_request": {
          "props": [
            {
              "id": "global#route_request_body_param",
              "name": "body"
            },
            {
              "id": "global#route_request_path_params",
              "name": "params"
            },
            {
              "id": "global#route_request_query_params",
              "name": "query"
            },
            {
              "id": "global#route_request_headers",
              "name": "headers"
            }
          ]
        },
        "route_response": {
          "props": [
            {
              "id": "global#route_response_body_param",
              "name": "body"
            },
            {
              "id": "global#route_response_status",
              "name": "status"
            }
          ]
        }
      }
    },
    "route_unit_test": {
      "name_pattern": "{{pascal name}}Route Unit Tests",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/routes/__tests__/{{kebab name}}.route.unit.test.ts",
      "template_path": "templates/route_unit_test.hbs"
    },
    "schema": {
      "name_pattern": "{{pascal type}}{{pascal name}}Schema",
      "dependencies": [],
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/schemas/{{kebab type}}-{{kebab name}}.schema.json",
      "template_path": "templates/schema.hbs"
    },
    "query_builder": {
      "name_pattern": "{{pascal name}}QueryBuilder",
      "dependencies": [],
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/models/{{kebab name}}.query-builder.ts",
      "template_path": "templates/query_builder.hbs",
      "defaults": {
        "mongo": {
          "imports": [
            {
              "list": [
                "MongoDB"
              ],
              "path": "@cole-framework/storage-mongodb"
            },
            {
              "list": [
                "Query",
                "QueryBuilder"
              ],
              "path": "@cole-framework/api-core"
            }
          ],
          "props": []
        }
      }
    },
    "query_factory": {
      "name_pattern": "{{pascal name}}QueryFactory",
      "dependencies": [],
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/models/{{kebab name}}.query-factory.ts",
      "template_path": "templates/query_factory.hbs",
      "defaults": {
        "mongo": {
          "imports": [
            {
              "list": [
                "MongoDB"
              ],
              "path": "@cole-framework/storage-mongodb"
            },
            {
              "list": [
                "Query",
                "QueryFactory"
              ],
              "path": "@cole-framework/api-core"
            }
          ],
          "props": []
        }
      }
    },
    "query_builder_unit_test": {
      "name_pattern": "{{pascal name}}QueryBuilder Unit Tests",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/models/__tests__/{{kebab name}}.query-builder.unit.test.ts",
      "template_path": "templates/query_builder_unit_test.hbs"
    },
    "dependency_injector": {
      "name_pattern": "{{pascal name}}DependencyInjector",
      "dependencies": [],
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/ioc/{{kebab name}}.di.ts",
      "template_path": "templates/dependency_injector.hbs",
      "defaults": {
        "imports": [
          {
            "list": [
              "Container",
              "DependencyInjector"
            ],
            "path": "@cole-framework/api-core"
          }
        ],
        "props": []
      }
    }
  }
}