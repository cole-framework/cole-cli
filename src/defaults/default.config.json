{
  "general": {
    "headless_mode": false,
    "override": false,
    "source_dirname": "src",
    "skip_tests": false,
    "with_dependencies": false
  },
  "databases": [
    {
      "name": "MongoDB",
      "alias": "mongo",
      "imports": {
        "driver": {
          "path": "driver import from \"...\""
        },
        "storage": {
          "path": "storage import from \"...\""
        }
      },
      "storage": {
        "name": "MongoStorage",
        "source": {
          "name": "MongoSource"
        },
        "config": {
          "name": "MongoConfig"
        }
      },
      "mappings": [
        {
          "db_type": "ObjectID",
          "code_type": "ObjectID"
        },
        {
          "db_type": "Long",
          "code_type": "bigint"
        },
        {
          "db_type": "ISODate",
          "code_type": "Date"
        },
        {
          "db_type": "Timestamp",
          "code_type": "Timestamp"
        },
        {
          "db_type": "Regex",
          "code_type": "RegExp"
        },
        {
          "db_type": "Binary",
          "code_type": "Buffer"
        }
      ]
    },
    {
      "name": "MySQL",
      "alias": "mysql",
      "imports": {
        "driver": {
          "path": "driver import from \"...\""
        },
        "storage": {
          "path": "storage import from \"...\""
        }
      },
      "storage": {
        "name": "MySqlStorage",
        "source": {
          "name": "MySqlSource"
        },
        "config": {
          "name": "MySqlConfig"
        }
      },
      "mappings": [
        {
          "db_type": "DATETIME",
          "code_type": "Date"
        }
      ]
    }
  ],
  "code": {
    "name": "TypeScript",
    "alias": "typescript",
    "types": [
      "string",
      "number",
      "boolean",
      "object",
      "any",
      "unknown",
      "null",
      "Array",
      "Set",
      "Map",
      "Date",
      "Buffer",
      "bigint",
      "void"
    ]
  },
  "components": {
    "mapper": {
      "name_pattern": "{{pascal name}}{{pascal type}}Mapper",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/mappers/{{kebab name}}.{{kebab type}}.mapper.ts",
      "template": "templates/mapper.hbs",
      "defaults": {
        "common": {
          "methods": [
            {
              "name": "toEntity",
              "params": [
                {
                  "name": "model",
                  "type": "dependency#model.name"
                }
              ],
              "return_type": "dependency#entity.name"
            },
            {
              "name": "toModel",
              "params": [
                {
                  "name": "entity",
                  "type": "dependency#entity.name"
                }
              ],
              "return_type": "dependency#model.name"
            }
          ]
        },
        "mongo": {
          "inheritance": {
            "name": "MongoMapper",
            "generics": [
              {
                "dflt": "dependency#entity.name"
              },
              {
                "dflt": "dependency#model.name"
              }
            ]
          },
          "interfaces": [],
          "imports": [
            {
              "list": [
                "MongoDB",
                "MongoMapper"
              ],
              "path": "@cole-framework/storage-mongodb"
            }
          ]
        }
      }
    },
    "source": {
      "name_pattern": "{{pascal name}}{{pascal type}}Source",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/sources/{{kebab name}}.{{kebab type}}.source.ts",
      "template": "templates/source.hbs",
      "defaults": {
        "mongo": {
          "ctor": {
            "params": [
              {
                "name": "dbSource",
                "type": "MongoSource"
              }
            ],
            "supr": {
              "params": [
                {
                  "name": "dbSource",
                  "type": "MongoSource"
                },
                {
                  "name": "table",
                  "type": "string",
                  "value": "use#table"
                }
              ]
            }
          },
          "inheritance": {
            "name": "MongoCollectionSource",
            "generics": [
              {
                "dflt": "dependency#model.name"
              }
            ]
          },
          "interfaces": [],
          "imports": [
            {
              "list": [
                "MongoSource",
                "MongoCollectionSource"
              ],
              "path": "@cole-framework/storage-mongodb"
            }
          ]
        }
      }
    },
    "entity": {
      "name_pattern": "{{pascal name}}",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/entities/{{kebab name}}.ts",
      "template_path": "templates/entity.hbs",
      "defaults": {
        "common": {
          "generics": [
            {
              "dflt": "dependency#model.name"
            }
          ],
          "methods": [
            {
              "meta": "is#to_model_method",
              "name": "toModel",
              "params": [],
              "return_type": "dependency#model.name"
            }
          ],
          "imports": [
            {
              "list": [
                "Entity",
                "UnknownObject"
              ],
              "path": "@cole-framework/api-core"
            }
          ],
          "props": [
            {
              "access": "public",
              "default": "\"\"",
              "name": "id",
              "type": "string",
              "optional": false
            },
            {
              "access": "public",
              "name": "rest",
              "type": "string",
              "optional": true
            }
          ]
        }
      }
    },
    "model": {
      "name_pattern": "{{pascal name}}{{pascal type}}Model",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/dtos/{{kebab name}}.dto.ts",
      "template_path": "templates/model.hbs",
      "defaults": {
        "mongo": {
          "imports": [
            {
              "list": [
                "MongoDB"
              ],
              "path": "@cole-framework/storage-mongodb"
            }
          ],
          "props": [
            {
              "name": "_id",
              "type": "MongoDB.ObjectId",
              "import": "mongo",
              "optional": true
            }
          ]
        },
        "json": {
          "imports": [],
          "props": [
            {
              "name": "id",
              "type": "string",
              "optional": true
            }
          ]
        }
      }
    },
    "use_case": {
      "name_pattern": "{{pascal name}}UseCase",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/use-cases/{{kebab name}}.use-case.ts",
      "template_path": "templates/use_case.hbs",
      "defaults": {
        "common": {
          "imports": [
            {
              "list": [
                "injectable",
                "inject",
                "UseCase",
                "Result",
                "Failure"
              ],
              "path": "@cole-framework/api-core"
            }
          ],
          "methods": [
            {
              "name": "execute",
              "params": "use#input",
              "return_type": "use#output",
              "async": true
            }
          ]
        }
      }
    },
    "repository": {
      "name_pattern": "{{pascal name}}Repository",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/repositories/{{kebab name}}.repository.ts",
      "template_path": "templates/repository.hbs",
      "defaults": {
        "common": {
          "imports": [
            {
              "list": [
                "Repository",
                "injectable"
              ],
              "path": "@cole-framework/api-core"
            }
          ],
          "inheritance": {
            "name": "Respository",
            "generics": [
              {
                "dflt": "dependency#entity.name"
              },
              {
                "dflt": "dependency#model.name"
              }
            ]
          }
        }
      }
    },
    "repository_impl": {
      "name_pattern": "{{pascal name}}RepositoryImpl",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/repositories/{{kebab name}}.repository-impl.ts",
      "template_path": "templates/repository_impl.hbs",
      "defaults": {
        "common": {
          "imports": [
            {
              "list": [
                "DataContext",
                "Repository",
                "RepositoryImpl"
              ],
              "path": "@cole-framework/api-core"
            }
          ],
          "inheritance": {
            "name": "RepositoryImpl",
            "generics": [
              {
                "dflt": "dependency#entity.name"
              },
              {
                "dflt": "dependency#model.name"
              }
            ]
          }
        },
        "mongo": {
          "imports": [
            {
              "list": [
                "MongoQueryBuilders",
                "MongoSource",
                "MongoConfig"
              ],
              "path": "@cole-framework/storage-mongodb"
            }
          ]
        }
      }
    },
    "repository_factory": {
      "name_pattern": "{{pascal name}}RepositoryFactory",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/repositories/{{kebab name}}.repository-factory.ts",
      "template_path": "templates/repository_factory.hbs",
      "defaults": {
        "mongo": {
          "imports": [
            {
              "list": [
                "MongoCollectionSource",
                "MongoConfig",
                "MongoQueryBuilders",
                "MongoSource"
              ],
              "path": "@cole-framework/storage-mongodb"
            },
            {
              "list": [
                "RepositoryImpl",
                "Container"
              ],
              "path": "@cole-framework/api-core"
            }
          ],
          "props": [],
          "methods": [
            {
              "meta": "global#repository_factory_method",
              "name": "create",
              "params": [],
              "return": null,
              "async": true,
              "access": "public",
              "static": true
            }
          ]
        }
      }
    },
    "controller": {
      "name_pattern": "{{pascal name}}Controller",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/controllers/{{kebab name}}.controller.ts",
      "template_path": "templates/controller.hbs",
      "defaults": {}
    },
    "route": {
      "name_pattern": "{{pascal method}}{{pascal name}}Route",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/routes/{{kebab method}}-{{kebab name}}.route.ts",
      "template_path": "templates/route.hbs",
      "defaults": {
        "common": {
          "methods": [
            {
              "name": "create",
              "static": true,
              "params": [
                {
                  "name": "handler",
                  "type": "RouteHandler"
                }
              ]
            }
          ],
          "ctor": {
            "access": "private",
            "params": [
              {
                "name": "handler",
                "type": "RouteHandler"
              }
            ],
            "supr": {
              "params": [
                {
                  "name": "path",
                  "value": "use#path"
                },
                {
                  "name": "handler",
                  "type": "RouteHandler",
                  "value": "handler"
                },
                {
                  "name": "addons",
                  "value": "use#addons"
                }
              ]
            }
          }
        },
        "get": {
          "imports": [
            {
              "list": [
                "UnknownObject",
                "GetRoute",
                "RouteHandler"
              ],
              "path": "@cole-framework/api-core"
            }
          ]
        },
        "post": {
          "imports": [
            {
              "list": [
                "UnknownObject",
                "PostRoute",
                "RouteHandler"
              ],
              "path": "@cole-framework/api-core"
            }
          ]
        },
        "put": {
          "imports": [
            {
              "list": [
                "UnknownObject",
                "PutRoute",
                "RouteHandler"
              ],
              "path": "@cole-framework/api-core"
            }
          ]
        },
        "patch": {
          "imports": [
            {
              "list": [
                "UnknownObject",
                "PatchRoute",
                "RouteHandler"
              ],
              "path": "@cole-framework/api-core"
            }
          ]
        },
        "delete": {
          "imports": [
            {
              "list": [
                "UnknownObject",
                "DeleteRoute",
                "RouteHandler"
              ],
              "path": "@cole-framework/api-core"
            }
          ],
          "props": []
        }
      }
    },
    "route_model": {
      "name_pattern": "{{pascal name}}{{pascal type}}Model",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/routes/{{kebab name}}.route-model.ts",
      "template_path": "templates/model.hbs",
      "defaults": {}
    },
    "route_io": {
      "name_pattern": "{{pascal method}}{{pascal name}}RouteIO",
      "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/routes/{{kebab method}}-{{kebab name}}.route-io.ts",
      "template_path": "templates/route.hbs",
      "defaults": {
        "common": {
          "interfaces": [{
            "name": "RouteIO",
            "generics": [
              { "dflt": "use#input" },
              { "dflt": "use#output" }
            ]
          }],
          "methods": [
            {
              "name": "toResponse",
              "return_type": "use#input",
              "params": [
                {
                  "name": "output",
                  "type": "use#output"
                }
              ]
            },
            {
              "name": "fromRequest",
              "return_type": "Response",
              "params": [
                {
                  "name": "request",
                  "type": "Request<use#query_params, use#path_params, use#request_body>"
                }
              ]
            }
          ]
        }
      }
    }
  }
}